// This is as WET as it can get, but unfortunately you can't nest SASS functions so the alternative is to make complex map definitions.

@function get-map-value($map, $keys...) {
  @each $key in $keys {
    $isValidKey: map-has-key($map, $key);

    @if ($isValidKey == false) {
      @warn "There is no element with key: '#{$key}'.";

      @return null;
    }

    $map: map-get($map, $key);
  }

  @return $map;
}

@function breakpoint($key) {
  @return get-map-value($breakpoints, $key);
}

@function orientation($key) {
  @return get-map-value($orientations, $key);
}

@function color($key) {
  @return get-map-value($colors, $key);
}

@function gradient($key) {
  @return get-map-value($gradients, $key);
}

@function font-size($key) {
  @return get-map-value($font-sizes, $key);
}

@function offset($key) {
  @return get-map-value($offsets, $key);
}

@function font($key) {
  @return get-map-value($fonts, $key);
}

@function default($key) {
  @return get-map-value($defaults, $key);
}
@function font-weight($key) {
  @return get-map-value($font-weights, $key);
}
@function line-height($key) {
  @return get-map-value($line-heights, $key);
}

@function get-responsive-value($value) {
  $px: "#{$value}px";
  $vw: "#{math.div($value, $desktopWidth) * 100}vw";

  @return min(#{$px}, #{$vw});
}

@function rv($minValue, $value: $minValue, $baseScreenWidth: $desktopWidth) {
  $minValuePX: "#{$minValue}px";
  $valueVW: "#{math.div($value, $baseScreenWidth) * 100}vw";

  @return max(#{$minValuePX}, #{$valueVW});
}

@function rv-max($maxValue, $value: $maxValue, $baseScreenWidth: $mobileWidth) {
  $maxValuePX: "#{$maxValue}px";
  $valueVW: "#{math.div($value, $baseScreenWidth) * 100}vw";

  @return min(#{$valueVW}, #{$maxValuePX});
}

@function clamped($minValue, $maxValue) {
  $minValuePX: "#{$minValue}px";
  $maxValuePX: "#{$maxValue}px";

  @return clamp(
    #{$minValuePX},
    calc(
      #{math.div($minValue, 16)}rem + (#{$maxValue} - #{$minValue}) *
        ((100vw - 375px) / (1600 - 375))
    ),
    #{$maxValuePX}
  );
  // font-size: clamp(20px, calc(1.25rem + (30 - 20) * ((100vw - $mobileWidth) / (1280 - $mobileWidth))), 30px);
}

@function get-vh-desktop($value) {
  @return #{math.div($value, $mockupDesktopScreenHeight)};
}

@function get-vh-mobile($value) {
  @return #{math.div($value, $mockupMobileScreenHeight)};
}

@function get-vh($value, $device: "mobile") {
  @if $device == "mobile" {
    @return calc(100vh * #{get-vh-mobile($value)});
  }

  @return calc(100vh * #{get-vh-desktop($value)});
}
